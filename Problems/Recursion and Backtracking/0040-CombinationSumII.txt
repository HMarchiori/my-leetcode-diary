// Date: 13/08/24
// needed to look on the Solution tab.

class Solution {
    public void backtrack(int index, int[] array, int target, List < List < Integer >> ans, List<Integer> ds) {
        if (target == 0) {ans.add(new ArrayList<>(ds)); return;}
        for (int i = index; i < array.length; i++) {
            if (i > index && array[i] == array[i-1]) continue;
            if (array[i] > target) break;

            ds.add(array[i]);
            backtrack(i + 1, array, target - array[i], ans, ds);
            ds.remove(ds.size() - 1);
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List < List < Integer >> ans = new ArrayList<>();
        List <Integer> ds = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(0, candidates, target, ans, ds);
        return ans;
    }
}