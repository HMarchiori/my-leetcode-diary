// Date: 30/07/24
// I've been practicing String and StringBuilder manipulation.

class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> ans = new ArrayList<>();
        if (digits == null || digits.length() == 0) {
            return ans;
        }

        Map<Character, String> combinations = new HashMap<>();
        combinations.put('2', "abc");
        combinations.put('3', "def");
        combinations.put('4', "ghi");
        combinations.put('5', "jkl");
        combinations.put('6', "mno");
        combinations.put('7', "pqrs");
        combinations.put('8', "tuv");
        combinations.put('9', "wxyz");

        StringBuilder str = new StringBuilder();
        backtrack(digits, 0, ans, str, combinations);
        return ans;
    }

    private void backtrack(String digits, int index, List<String> ans, StringBuilder str, Map<Character, String> combinations) {
        if (index == digits.length()) {
            ans.add(str.toString());
            return;
        }

        String letters = combinations.get(digits.charAt(index));
        for (char letter : letters.toCharArray()) {
            str.append(letter);
            backtrack(digits, index + 1, ans, str, combinations);
            str.deleteCharAt(str.length() - 1);
        }
    }
}